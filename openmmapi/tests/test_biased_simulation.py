
# no biased potential

from simtk.openmm.app import *
from simtk.openmm import *
from simtk.unit import *
from sys import stdout
from ANN import *

############################ PARAMETERS BEGIN ###############################################################
record_interval = 50
total_number_of_steps = 5000

input_pdb_file_of_molecule = './dependency/alanine_dipeptide.pdb'
force_field_file = 'amber99sb.xml'
water_field_file = 'amber99_obc.xml'

pdb_reporter_file = './dependency/test_biased_output.pdb'
state_data_reporter_file = './dependency/test_biased_report.txt'


############################ PARAMETERS END ###############################################################


pdb = PDBFile(input_pdb_file_of_molecule) 
forcefield = ForceField(force_field_file) # without water
system = forcefield.createSystem(pdb.topology,  nonbondedMethod=NoCutoff, \
                                 constraints=AllBonds)  # what does it mean by topology? 

platform = Platform.getPlatformByName('Reference')
platform.loadPluginsFromDirectory('.')  # load the plugin from the current directory

force = ANN_Force()

force.set_layer_types(['Tanh', 'Tanh'])
list_of_index_of_atoms_forming_dihedrals = [[2,5,7,9],
											[5,7,9,15],
											[7,9,15,17],
											[9,15,17,19]]

force.set_list_of_index_of_atoms_forming_dihedrals(list_of_index_of_atoms_forming_dihedrals)
force.set_num_of_nodes([8, 10, 2])
force.set_potential_center(
	[-0.2,-0.7]
	)
force.set_force_constant(4000)
force.set_values_of_biased_nodes([
	[0.0096316940344660755, -0.0031624321928546825, 0.044886442111454428, 0.023927594651159491, -0.017410512442375195, 0.0020247454645218829, 0.024290774214337792, -0.021732543604203864, -0.024418431019692731, 0.019389905432710033]
,
[0.042970389466401235, -0.016937990399284467]
	])
force.set_coeffients_of_connections([
									[0.024258666258152265, -0.18709234718987147, -0.34666630065933901, -0.0097145831269005202, 0.023818776311455583, 0.20486355680814722, -0.13091286630467894, -0.00084448643731490931, 0.0091362269230177082, -0.077399665844628984, -0.14034617970484806, 0.0021922542034655107, 0.010005821856689155, 0.095891849885594918, -0.057868226259558064, -0.0034932495029118132, 0.019061009708384768, 0.18095916958945613, 0.37179247462644222, -0.042496133737349027, -0.0042744114760344858, 0.15658063200846373, -0.2029680522763869, -0.018601883529285206, 0.021072115531549251, 0.14056892332204451, 0.29177669809945178, -0.037137274438510302, 0.0011912032979414038, 0.1477867601736485, -0.17355770990693353, -0.013848517397792316, -0.04300328978923923, 0.022319515543345127, 0.040752386015896432, 0.022092819540896116, -0.020868661556390635, -0.27190036290832376, 0.22588485291029314, 0.013703314816766104, 0.018214551592594701, -0.13147893429561802, -0.25711703303421907, -0.0031305596587543117, 0.017969863589001323, 0.13187655589988012, -0.080993748378032984, 0.0024822795312344111, 0.024647468796550203, 0.096377516915737038, 0.19153251999588022, -0.01207034083527982, 0.0018479200182257135, 0.13718351694465064, -0.13913768944145369, -0.015338355721609366, -0.027770397130197712, 0.11618928185007109, 0.20831354240604491, 0.017991003450994546, -0.020240434270285018, -0.26541095658585867, 0.19639767385419726, 0.0023654856136417234, -0.030269369614098946, -0.10595883290029026, -0.21826065037562944, 0.024018943619484739, -0.0097029250195476494, -0.20406444304847507, 0.21720667532588836, 0.0047905678070503813, 0.029805131172036037, -0.061188584331722452, -0.10224787625632037, -0.011765295801168162, 0.026303925968299603, 0.25917611851787409, -0.21395534244749917, -0.0059063119604919577]
,
[-0.31282693955234714, -0.11750325356930738, 0.52449105257007889, 0.40714847915855135, -0.079119322276117177, -0.23043423554631839, 0.27736595095588007, 0.12112809498018133, -0.34972156749543304, 0.00078314415376834197, -0.39098245693400968, -0.1599598174580377, -0.1227868931069991, -0.12025778867449748, 0.37405070003793589, -0.25048895397330562, -0.12172186933843535, 0.4216350606163814, 0.21761753914894943, -0.38003212812278953]
,])

system.addForce(force)

integrator = LangevinIntegrator(300*kelvin, 1/picosecond, 0.002*picoseconds)

simulation = Simulation(pdb.topology, system, integrator)
simulation.context.setPositions(pdb.positions)


simulation.minimizeEnergy()
simulation.reporters.append(PDBReporter(pdb_reporter_file, record_interval))
simulation.reporters.append(StateDataReporter(state_data_reporter_file, record_interval, step=True, potentialEnergy=True, temperature=True))
simulation.step(total_number_of_steps)

print('Done!')
